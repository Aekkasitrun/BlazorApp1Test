@using BudgetBook.Data
@inject BudgetBookService budgetBookService
@inject IJSRuntime JSRuntime

<EditForm Model="newEntry" OnValidSubmit="CreateEntry" >
    <DataAnnotationsValidator/>
    <div class="d-flex justify-content-center mb-2">
        <div class="w-100 ">
            @*<label class="control-label">Description</label>*@
            <InputText class="form-control" @bind-Value="@newEntry.Description" />
            <ValidationMessage For="@(() => newEntry.Description)"/>
        </div>
        @*<div class="col">
            <label class="control-label">Amount</label>
            <input class="form-control" @bind="@newEntry.Amount" />
        </div>*@ 
        <div class="mx-2">
            <button class="btn btn-primary " type="submit">Add</button>
        </div>
    </div>
    
       
    
</EditForm>

@*<form>
    <div class="row">
        <div class="col">
            <label class="control-label">Description</label>
            <input class="form-control" @bind="@newEntry.Description" />
        </div>
        <div class="col">
            <label class="control-label">Amount</label>
            <input class="form-control" @bind="@newEntry.Amount" />
        </div>
    </div>
    <div class="row mt-2">
        <div class="col">
            <button class="btn btn-primary my-2" @onclick="@CreateEntry">Add</button>
        </div>
    </div>
</form>*@

@code {
    Entry newEntry = new Entry();
    protected async void CreateEntry()
    {
        await budgetBookService.AddEntry(newEntry);
        Console.WriteLine("add newEntry =" + newEntry.Description);
        await JSRuntime.InvokeVoidAsync("refreshPage");
    }
}